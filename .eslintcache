[{"C:\\Users\\jrns0\\com_community\\src\\index.js":"1","C:\\Users\\jrns0\\com_community\\src\\reportWebVitals.js":"2","C:\\Users\\jrns0\\com_community\\src\\App.js":"3","C:\\Users\\jrns0\\com_community\\src\\main\\main.js":"4","C:\\Users\\jrns0\\com_community\\src\\board\\boardMain.js":"5","C:\\Users\\jrns0\\com_community\\src\\board\\app1.js":"6","C:\\Users\\jrns0\\com_community\\src\\board\\boardMete.js":"7","C:\\Users\\jrns0\\com_community\\src\\board\\boardwrite.js":"8","C:\\Users\\jrns0\\com_community\\src\\board\\boardMete2.js":"9","C:\\Users\\jrns0\\com_community\\src\\board\\boardreple.js":"10","C:\\Users\\jrns0\\com_community\\src\\board\\deleteBoard.js":"11","C:\\Users\\jrns0\\com_community\\src\\login\\login.js":"12","C:\\Users\\jrns0\\com_community\\src\\sign\\sign.js":"13","C:\\Users\\jrns0\\com_community\\src\\ifram\\ifram.js":"14"},{"size":500,"mtime":499162500000,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":655,"mtime":1612943908916,"results":"18","hashOfConfig":"16"},{"size":17163,"mtime":1613453984514,"results":"19","hashOfConfig":"16"},{"size":2568,"mtime":1612943908918,"results":"20","hashOfConfig":"16"},{"size":4157,"mtime":1613448675065,"results":"21","hashOfConfig":"16"},{"size":8805,"mtime":1612943908919,"results":"22","hashOfConfig":"16"},{"size":6437,"mtime":1612943908923,"results":"23","hashOfConfig":"16"},{"size":6466,"mtime":1612943908920,"results":"24","hashOfConfig":"16"},{"size":3465,"mtime":1612943908922,"results":"25","hashOfConfig":"16"},{"size":4271,"mtime":1612943908925,"results":"26","hashOfConfig":"16"},{"size":7101,"mtime":1612943908927,"results":"27","hashOfConfig":"16"},{"size":7551,"mtime":1612943908933,"results":"28","hashOfConfig":"16"},{"size":4146,"mtime":1613453954603,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"101a28b",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"32"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jrns0\\com_community\\src\\index.js",[],["68","69"],"C:\\Users\\jrns0\\com_community\\src\\reportWebVitals.js",[],"C:\\Users\\jrns0\\com_community\\src\\App.js",["70","71","72","73"],"import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport Main from \"./main/main\";\r\nimport App1 from \"./board/app1\";\r\nimport Boardwrite from \"./board/boardwrite\";\r\nimport AlertDialogSlide from \"./board/deleteBoard\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Main />\r\n          </Route>\r\n\r\n          <Route exact path=\"/App1\">\r\n            <App1 />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\jrns0\\com_community\\src\\main\\main.js",["74","75","76","77"],"C:\\Users\\jrns0\\com_community\\src\\board\\boardMain.js",["78","79"],"import React, { Component } from \"react\";\r\nimport \"./boardMain.css\";\r\nimport App from \"./app1\";\r\nimport BoardMete from \"./boardMete\";\r\nimport Boardwrite from \"./boardwrite\";\r\nimport $ from \"jquery\";\r\nimport jQuery from \"jquery\";\r\nwindow.$ = window.jQuery = jQuery;\r\n\r\nclass BoardMain extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      number: 1,\r\n      title: \"\",\r\n      writer: \"hwije\",\r\n      time: \"\",\r\n      visit: 12,\r\n      content: \"\",\r\n      boardon: \"inline\",\r\n      writeon: \"none\",\r\n      // clickmenu: this.props.clickmenu,\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {};\r\n\r\n  writeon = () => {\r\n    if (localStorage.getItem(\"userid\") === \"\") {\r\n      alert(\"로그인 해주세요\");\r\n    } else {\r\n      this.setState({\r\n        boardon: \"none\",\r\n        writeon: \"inline\",\r\n      });\r\n    }\r\n  };\r\n\r\n  boardon = () => {\r\n    this.setState({\r\n      boardon: \"inline\",\r\n      writeon: \"none\",\r\n    });\r\n  };\r\n\r\n  // componentDidUpdate = (prevProps, prevState) => {\r\n  //   if (this.props.offBoardWrite !== prevProps.offBoardWrite) {\r\n  //     this.setState(\r\n  //       {\r\n  //         ...this.state,\r\n  //         selectTagNum: -1,\r\n  //         // boardon: \"none\",\r\n  //         // writeon: \"none\",\r\n  //         // number: this.props.number,\r\n  //       },\r\n  //       () => {\r\n  //         // console.log(this.state.number + \"000\");\r\n  //       }\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"board_all\">\r\n        <div className=\"boardmain_titlebox\">\r\n          <div className=\"boardmain_title\">{this.props.clickmenu} 게시판</div>\r\n          <div>\r\n            <button onClick={this.boardon} className=\"boardmain_boardBtn\">\r\n              게시판\r\n            </button>\r\n            <button onClick={this.writeon} className=\"boardmain_writeBtn\">\r\n              글쓰기\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div style={{ display: this.state.boardon }}>\r\n          <BoardMete\r\n            clickmenu={this.props.clickmenu}\r\n            rows={this.props.rows}\r\n            selectmenuFetch={this.props.selectmenuFetch}\r\n          />\r\n        </div>\r\n        {/* <div className=\"board_main_blank\"></div> */}\r\n        {/* <App /> */}\r\n        <div style={{ display: this.state.writeon }}>\r\n          <Boardwrite\r\n            clickmenu={this.props.clickmenu}\r\n            selectmenuFetch={this.props.selectmenuFetch}\r\n            boardon={this.boardon}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoardMain;\r\n","C:\\Users\\jrns0\\com_community\\src\\board\\app1.js",["80","81"],"C:\\Users\\jrns0\\com_community\\src\\board\\boardMete.js",["82","83","84","85","86"],"import React, { useEffect } from \"react\";\r\nimport { Component } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport $ from \"jquery\";\r\nimport jQuery from \"jquery\";\r\nimport \"./boardMete.css\";\r\nimport BoardMete2 from \"./boardMete2\";\r\n\r\nconst columns = [\r\n  { id: \"number\", label: \"번호\", minWidth: 70 },\r\n  { id: \"title\", label: \"제목\", minWidth: 100 },\r\n  {\r\n    id: \"writer\",\r\n    label: \"글쓴이\",\r\n    minWidth: 70,\r\n    align: \"right\",\r\n    format: (value) => value.toLocaleString(\"en-US\"),\r\n  },\r\n  {\r\n    id: \"date\",\r\n    label: \"등록일\",\r\n    minWidth: 70,\r\n    align: \"right\",\r\n    format: (value) => value.toLocaleString(\"en-US\"),\r\n  },\r\n  {\r\n    id: \"recomend\",\r\n    label: \"추천수\",\r\n    minWidth: 70,\r\n    align: \"right\",\r\n    // format: (value) => value.toFixed(2),\r\n  },\r\n];\r\n\r\n// function createData(number, title, writer, date, recomend) {\r\n//   //   const density = population / size;\r\n//   return { number, title, writer, date, recomend };\r\n// }\r\n\r\n// let rows = [];\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"98%\",\r\n  },\r\n  container: {\r\n    maxHeight: 800,\r\n  },\r\n});\r\n\r\nexport default class Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      page: 0,\r\n      rowsPerPage: 12,\r\n      content: \"\",\r\n      id: \"\",\r\n      number: 0,\r\n      recomend: 0,\r\n      time: \"\",\r\n      title: \"\",\r\n      writer: \"\",\r\n      contentOn: \"none\",\r\n      clickmenu: this.props.clickmenu,\r\n    };\r\n  }\r\n\r\n  changeContentOn = () => {\r\n    this.setState({\r\n      contentOn: \"none\",\r\n    });\r\n  };\r\n  //  const classes = useStyles();\r\n\r\n  //   const [page, setPage] = React.useState(0);\r\n  //   const [rowsPerPage, setRowsPerPage] = React.useState(12);\r\n\r\n  componentDidMount = () => {\r\n    // let data = {\r\n    //   id: \"\",\r\n    // };\r\n    // fetch(\"http://localhost:3001/download\", {\r\n    //   method: \"post\",\r\n    //   headers: { \"Content-Type\": \"application/json\" },\r\n    //   body: JSON.stringify(data),\r\n    // })\r\n    //   .then((res) => res.json())\r\n    //   .then((json) => {\r\n    //     if (json === undefined) {\r\n    //       alert(\"오류\");\r\n    //     } else {\r\n    //       //   rows = rows.concat(createData(\"dd\", \"dd\", 126577691, 1972550));\r\n    //       //   rows = rows.concat(createData(\"dd\", \"dd\", 126577691, 1972550));\r\n    //       for (let i = 0; i < json.length; i++) {\r\n    //         if (json[i].kinds === this.props.clickmenu) {\r\n    //           rows = rows.concat(\r\n    //             createData(\r\n    //               json[i].number,\r\n    //               json[i].title,\r\n    //               json[i].writer,\r\n    //               json[i].time,\r\n    //               json[i].recomend\r\n    //             )\r\n    //           );\r\n    //         }\r\n    //       }\r\n    //       console.log(json);\r\n    //     }\r\n    //   });\r\n  };\r\n\r\n  componentDidUpdate = (prevProps, prevState) => {\r\n    console.log(\"********************************\");\r\n    if (this.props.clickmenu !== prevProps.clickmenu) {\r\n      console.log(\"업뎃?\");\r\n      this.setState({\r\n        ...this.state,\r\n        selectTagNum: -1,\r\n        contentOn: \"none\",\r\n      });\r\n    }\r\n  };\r\n\r\n  handleChangePage = (event, newPage) => {\r\n    this.setState({\r\n      page: newPage,\r\n    });\r\n  };\r\n\r\n  handleChangeRowsPerPage = (event) => {\r\n    // setRowsPerPage(+event.target.value);\r\n    this.setState({\r\n      page: 0,\r\n      rowsPerPage: +event.target.value,\r\n    });\r\n  };\r\n\r\n  test = () => {\r\n    console.log(\"test\");\r\n  };\r\n\r\n  // plusRecomend = () => {\r\n  //   let plus = this.state.recomend;\r\n  //   this.setState({\r\n  //     recomend: plus,\r\n  //   });\r\n  // };\r\n\r\n  rowclick = (row) => {\r\n    if (localStorage.getItem(\"userid\") === \"\") {\r\n      alert(\"로그인 해주세요\");\r\n    } else {\r\n      window.scrollTo(0, 0);\r\n      let data = {\r\n        number: row.number,\r\n        writer: row.writer,\r\n      };\r\n\r\n      fetch(\"http://localhost:3001/getContent\", {\r\n        method: \"post\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((json) => {\r\n          if (json === undefined) {\r\n            alert(\"오류\");\r\n          } else {\r\n            this.setState(\r\n              {\r\n                content: json[0].content,\r\n                id: json[0].id,\r\n                number: json[0].number,\r\n                recomend: json[0].recomend,\r\n                time: json[0].time,\r\n                title: json[0].title,\r\n                writer: json[0].writer,\r\n                content: json[0].content,\r\n                contentOn: \"block\",\r\n              },\r\n              () => {\r\n                console.log(this.state.number);\r\n              }\r\n            );\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let data = {\r\n      //Mete2로 넘겨주는 데이터\r\n      content: this.state.content,\r\n      id: this.state.id,\r\n      number: this.state.number,\r\n      recomend: this.state.recomend,\r\n      time: this.state.time,\r\n      title: this.state.title,\r\n      writer: this.state.writer,\r\n    };\r\n\r\n    return (\r\n      <div style={{ borderTop: \"2px solid black\", marginTop: \"20px\" }}>\r\n        <div style={{ display: this.state.contentOn }}>\r\n          <BoardMete2\r\n            clickmenu={this.props.clickmenu}\r\n            data={data}\r\n            number={this.state.number}\r\n            selectmenuFetch={this.props.selectmenuFetch}\r\n            rows={this.props.rows}\r\n            changeContentOn={this.changeContentOn}\r\n          />\r\n        </div>\r\n\r\n        {/* 본문 */}\r\n        <Paper style={{ marginTop: \"10px\" }}>\r\n          <TableContainer>\r\n            <Table stickyHeader aria-label=\"sticky table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  {columns.map((column) => (\r\n                    <TableCell\r\n                      key={column.id}\r\n                      align={column.align}\r\n                      style={{\r\n                        minWidth: column.minWidth,\r\n                        backgroundColor: \"#eeeded\",\r\n                        // borderTop: \"1px solid black\",\r\n                      }}\r\n                    >\r\n                      {column.label}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {this.props.rows\r\n                  .slice(\r\n                    this.state.page * this.state.rowsPerPage,\r\n                    this.state.page * this.state.rowsPerPage +\r\n                      this.state.rowsPerPage\r\n                  )\r\n                  .map((row, index) => {\r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        role=\"checkbox\"\r\n                        tabIndex={-1}\r\n                        key={index}\r\n                        // key={row.code}\r\n                        onClick={() => {\r\n                          this.rowclick(row);\r\n                        }}\r\n                      >\r\n                        {columns.map((column) => {\r\n                          const value = row[column.id];\r\n                          return (\r\n                            <TableCell\r\n                              key={column.id}\r\n                              align={column.align}\r\n                              style={{ cursor: \"pointer\" }}\r\n                            >\r\n                              {column.format && typeof value === \"number\"\r\n                                ? column.format(value)\r\n                                : value}\r\n                            </TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <TablePagination\r\n            // rowsPerPageOptions={[5]}\r\n            // rowsPerPageOptions={[5, 10, 100]}\r\n            rowsPerPageOptions={[12]}\r\n            component=\"div\"\r\n            count={this.props.rows.length}\r\n            rowsPerPage={this.state.rowsPerPage}\r\n            page={this.state.page}\r\n            onChangePage={this.handleChangePage}\r\n            onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n          />\r\n        </Paper>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\jrns0\\com_community\\src\\board\\boardwrite.js",["87","88","89","90"],"import React, { Component } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport \"./boardwrite.css\";\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     \"& > *\": {\r\n//       margin: theme.spacing(1),\r\n//       width: \"25ch\",\r\n//     },\r\n//   },\r\n// }));\r\n\r\nclass Boardwrite extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      number: 1,\r\n      title: \"\",\r\n      writer: \"\",\r\n      time: \"\",\r\n      visit: 12,\r\n      content: \"\",\r\n      userid: localStorage.getItem(\"userid\"),\r\n    };\r\n  }\r\n\r\n  // componentDidUpdate = (prevProps, prevState) => {\r\n  //   if (\r\n  //     this.props.number !== prevProps.number ||\r\n  //     this.props.submintTF !== prevProps.submintTF\r\n  //   ) {\r\n  //     this.setState(\r\n  //       {\r\n  //         ...this.state,\r\n  //         selectTagNum: -1,\r\n  //       },\r\n  //       () => {\r\n  //         this.fetchFunction();\r\n  //       }\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  componentDidMount = () => {\r\n    if (localStorage.getItem(\"userid\") != \"\") {\r\n      let data = {\r\n        id: localStorage.getItem(\"userid\"),\r\n      };\r\n      //usernickname가져옴\r\n      fetch(\"http://localhost:3001/getUser\", {\r\n        method: \"post\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((json) => {\r\n          if (json === undefined) {\r\n            alert(\"오류\");\r\n          } else {\r\n            this.setState({\r\n              writer: json[0].user_nick,\r\n            });\r\n            //   console.log(json[0].user_nick);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value, // 변화가 있을때마다 state값을 초기화\r\n    });\r\n    console.log(this.state.title);\r\n    console.log(this.state.content);\r\n    console.log(this.props.clickmenu);\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    //유저정보 가져옴\r\n    let data = {\r\n      id: localStorage.getItem(\"userid\"),\r\n    };\r\n    //usernickname가져옴\r\n    fetch(\"http://localhost:3001/getUser\", {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        if (json === undefined) {\r\n          alert(\"오류\");\r\n        } else {\r\n          this.setState(\r\n            {\r\n              writer: json[0].user_nick,\r\n            },\r\n            () => {\r\n              //유저 닉네임가져오고 업로드\r\n              //시간 객체\r\n              let today = new Date();\r\n              let time = {\r\n                year: today.getFullYear(),\r\n                month: today.getMonth() + 1,\r\n                date: today.getDate(),\r\n                hours: today.getHours(),\r\n                minutes: today.getMinutes(),\r\n              };\r\n\r\n              let timestring = `${time.year}/${time.month}/${time.date} ${time.hours}:${time.minutes}`;\r\n              console.log(timestring);\r\n              // 전달 할 거\r\n\r\n              let data = {\r\n                title: this.state.title,\r\n                content: this.state.content,\r\n                writer: this.state.writer,\r\n                time: timestring,\r\n                userid: this.state.userid,\r\n                clickmenu: this.props.clickmenu,\r\n              };\r\n\r\n              if (this.state.title == \"\" || this.state.content == \"\") {\r\n                // 내용을 안썼으면 alert발동\r\n                alert(\"제목이나 내용을 입력해 주세요\");\r\n              } else if (data.content.length >= 2000) {\r\n                //내용 입력값의 길이가 200자가 넘어가면 alert발동\r\n                alert(\"2000자를 초과 했어요\");\r\n              } else {\r\n                fetch(\"http://localhost:3001/upload\", {\r\n                  //서버의 Singo라우터를 찾아간다\r\n                  method: \"post\",\r\n                  headers: { \"Content-Type\": \"application/json\" },\r\n                  body: JSON.stringify(data), // json화 해버리기\r\n                });\r\n\r\n                alert(\"업로드 했습니다.\"); //제출 알림\r\n                // window.location.reload();\r\n                this.props.boardon();\r\n                this.props.selectmenuFetch();\r\n                // document.getElementById(\"outlined - basic\").value = \"\";\r\n                document.getElementById(\"outlined-basic\").value = \"\";\r\n                document.getElementById(\"outlined-multiline-static\").value = \"\";\r\n                // window.scrollTo(0, 0);\r\n\r\n                this.setState({\r\n                  content: \"\",\r\n                });\r\n                // setTimeout($(\"aaa\").load(window.location.href + \"aaa\"), 1000);\r\n              }\r\n            }\r\n          );\r\n        }\r\n      });\r\n  };\r\n  render() {\r\n    // const classes = useStyles();\r\n    return (\r\n      <div>\r\n        <div className=\"write_titlename\">글쓰기</div>\r\n        {/* <input\r\n          name=\"title\"\r\n          placeholder=\"제목입력\"\r\n          onChange={this.onChange}\r\n        ></input> */}\r\n        {/* <textarea\r\n          name=\"content\"\r\n          placeholder=\"최대 2000자까지 가능해요\"\r\n          onChange={this.onChange}\r\n        ></textarea> */}\r\n        <div className=\"write_box\">\r\n          <div className=\"write_titlebox\">\r\n            <TextField\r\n              className=\"write_title_\"\r\n              id=\"outlined-basic\"\r\n              label=\"제목\"\r\n              variant=\"outlined\"\r\n              name=\"title\"\r\n              placeholder=\"제목입력\"\r\n              onChange={this.onChange}\r\n            />\r\n          </div>\r\n          <div className=\"write_contentbox\">\r\n            <TextField\r\n              className=\"write_content_\"\r\n              id=\"outlined-multiline-static\"\r\n              label=\"내용\"\r\n              multiline\r\n              rows={20}\r\n              // defaultValue=\"Default Value\"\r\n              variant=\"outlined\"\r\n              name=\"content\"\r\n              placeholder=\"최대 2000자까지 가능해요\"\r\n              onChange={this.onChange}\r\n            />\r\n          </div>\r\n\r\n          <button onClick={this.onSubmit} className=\"write_button\">\r\n            확인\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Boardwrite;\r\n","C:\\Users\\jrns0\\com_community\\src\\board\\boardMete2.js",["91","92"],"import React, { Component } from \"react\";\r\nimport App1 from \"./app1\";\r\nimport Boardreple from \"./boardreple\";\r\nimport like from \"./like.png\";\r\nimport DeleteBoard from \"./deleteBoard\";\r\n\r\nclass BoardMete2 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      reple: \"\",\r\n      id: localStorage.getItem(\"userid\"),\r\n      writer: localStorage.getItem(\"usernick\"),\r\n      number: \"\",\r\n      submintTF: true,\r\n      like_: 0,\r\n      reple_q: 0,\r\n    };\r\n  }\r\n  componentDidMount = () => {};\r\n\r\n  componentDidUpdate = (prevProps, prevState) => {\r\n    if (this.props.data.recomend !== prevProps.data.recomend) {\r\n      this.setState(\r\n        {\r\n          ...this.state,\r\n          selectTagNum: -1,\r\n          like_: this.props.data.recomend,\r\n          // number: this.props.number,\r\n        },\r\n        () => {\r\n          // console.log(this.state.number + \"000\");\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value, // 변화가 있을때마다 state값을 초기화\r\n    });\r\n    console.log(this.state.reple);\r\n  };\r\n\r\n  repleSubmit = () => {\r\n    if (localStorage.getItem(\"userid\") === \"\") {\r\n      alert(\"로그인 해주세요\");\r\n    } else {\r\n      let today = new Date();\r\n      let time = {\r\n        year: today.getFullYear(),\r\n        month: today.getMonth() + 1,\r\n        date: today.getDate(),\r\n        hours: today.getHours(),\r\n        minutes: today.getMinutes(),\r\n      };\r\n      let timestring = `${time.year}/${time.month}/${time.date} ${time.hours}:${time.minutes}`;\r\n\r\n      let data = {\r\n        reple: this.state.reple,\r\n        writer: this.state.writer,\r\n        time: timestring,\r\n        id: this.state.id,\r\n        number: this.props.number,\r\n      };\r\n\r\n      console.log(data);\r\n      if (this.state.submintTF === true) {\r\n        this.setState(\r\n          {\r\n            submintTF: false,\r\n          },\r\n          () => {\r\n            fetch(\"http://localhost:3001/repUpload\", {\r\n              //서버의 Singo라우터를 찾아간다\r\n              method: \"post\",\r\n              headers: { \"Content-Type\": \"application/json\" },\r\n              body: JSON.stringify(data), // json화 해버리기\r\n            }).then((document.getElementById(\"mTxtArea\").value = \"\"));\r\n          }\r\n        );\r\n      } else {\r\n        this.setState(\r\n          {\r\n            submintTF: true,\r\n          },\r\n          () => {\r\n            fetch(\"http://localhost:3001/repUpload\", {\r\n              method: \"post\",\r\n              headers: { \"Content-Type\": \"application/json\" },\r\n              body: JSON.stringify(data),\r\n            }).then((document.getElementById(\"mTxtArea\").value = \"\"));\r\n          }\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  clickLikeB = () => {\r\n    if (localStorage.getItem(\"userid\") === \"\") {\r\n      alert(\"로그인 해주세요\");\r\n    } else {\r\n      let plus = this.props.data.recomend + 1;\r\n      console.log(this.props.data.number + \"========\" + plus);\r\n\r\n      let data = {\r\n        number: this.props.data.number,\r\n        recomend: plus,\r\n      };\r\n\r\n      fetch(\"http://localhost:3001/updateLikeB\", {\r\n        method: \"post\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      }).then(\r\n        this.setState({\r\n          like_: plus,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  replq_q = (quentity) => {\r\n    this.setState({\r\n      reple_q: quentity,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Mete_board\">\r\n        <div className=\"mete_titlebox\">\r\n          <div className=\"mete_Btitle\">\r\n            {this.props.data.title}\r\n            {/* <button className=\"mete_deletebutton\">삭제</button> */}\r\n            <DeleteBoard\r\n              data={this.props.data}\r\n              selectmenuFetch={this.props.selectmenuFetch}\r\n              clickmenu={this.props.clickmenu}\r\n              rows={this.props.rows}\r\n              changeContentOn={this.props.changeContentOn}\r\n            />\r\n          </div>\r\n          <div className=\"mete_Bwtbox\">\r\n            <div className=\"mete_Bwtbox2\">\r\n              <div className=\"mete_Bwriter\"> {this.props.data.writer}</div>\r\n              <div className=\"mete_Btime\">{this.props.data.time}</div>\r\n            </div>\r\n            {/* <button className=\"mete_recomendButn\">\r\n              추천: {this.props.data.recomend}\r\n            </button> */}\r\n\r\n            <div className=\"mete_lickbox\">\r\n              <img\r\n                src={like}\r\n                width=\"12\"\r\n                height=\"12\"\r\n                style={{ marginTop: 3, marginRight: 3 }}\r\n              />\r\n              <div\r\n                style={{ marginRight: 15, cursor: \"pointer\" }}\r\n                onClick={this.clickLikeB}\r\n              >\r\n                좋아요: {this.state.like_}\r\n                {/* 좋아요: {this.props.data.recomend} */}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"mete_content\">\r\n          {this.props.data.content.split(\"\\n\").map((line) => {\r\n            return (\r\n              <span>\r\n                {line}\r\n                <br />\r\n              </span>\r\n            );\r\n          })}\r\n\r\n          {/* {this.props.data.content} */}\r\n        </div>\r\n        <div className=\"mete_replebox\">\r\n          <div className=\"mete_textareabox\">\r\n            <div className=\"mete_repletitle\">\r\n              <text>댓글쓰기</text>\r\n              <text style={{ marginRight: \"80px\" }}>\r\n                댓글 수 : {this.state.reple_q}\r\n              </text>\r\n            </div>\r\n            <div className=\"mete_textareabox2\">\r\n              <textarea\r\n                className=\"mete_textarea\"\r\n                name=\"reple\"\r\n                placeholder=\"최대 200자까지 가능해요\"\r\n                onChange={this.onChange}\r\n                id=\"mTxtArea\"\r\n              ></textarea>\r\n              <button className=\"mete_replebtn\" onClick={this.repleSubmit}>\r\n                등록\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"mete_line\"></div>\r\n        <div style={{ marginBottom: 30 }}>\r\n          <Boardreple\r\n            clickmenu={this.state.clickmenu}\r\n            number={this.props.number}\r\n            submintTF={this.state.submintTF}\r\n            replq_q={this.replq_q}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoardMete2;\r\n","C:\\Users\\jrns0\\com_community\\src\\board\\boardreple.js",["93"],"import React, { Component } from \"react\";\r\nimport \"./boardreple.css\";\r\nimport like from \"./like.png\";\r\n\r\n// let list = [];\r\n\r\nfunction createData(number, nick, time, reple, recomend) {\r\n  return { number, nick, time, reple, recomend };\r\n}\r\n\r\nclass Boardreple extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      list: [],\r\n    };\r\n  }\r\n\r\n  fetchFunction = () => {\r\n    this.setState(\r\n      {\r\n        list: [],\r\n      },\r\n      () => {\r\n        let data = {\r\n          number: this.props.number,\r\n        };\r\n        fetch(\"http://localhost:3001/repDownload\", {\r\n          method: \"post\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(data),\r\n        })\r\n          .then((res) => res.json())\r\n          .then((json) => {\r\n            if (json === undefined) {\r\n              alert(\"오류\");\r\n            } else {\r\n              for (let i = 0; i < json.length; i++) {\r\n                this.setState(\r\n                  {\r\n                    list: this.state.list.concat(\r\n                      createData(\r\n                        json[i].number,\r\n                        json[i].nick,\r\n                        json[i].time,\r\n                        json[i].reple,\r\n                        json[i].recomend\r\n                      )\r\n                    ),\r\n                  },\r\n                  () => {\r\n                    this.props.replq_q(json.length);\r\n                  }\r\n                );\r\n              }\r\n              console.log(json);\r\n            }\r\n          });\r\n      }\r\n    );\r\n  };\r\n\r\n  componentDidUpdate = (prevProps, prevState) => {\r\n    if (\r\n      this.props.number !== prevProps.number ||\r\n      this.props.submintTF !== prevProps.submintTF\r\n    ) {\r\n      this.setState(\r\n        {\r\n          ...this.state,\r\n          selectTagNum: -1,\r\n        },\r\n        () => {\r\n          this.fetchFunction();\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  clickLick = (number, recomend) => {\r\n    if (localStorage.getItem(\"userid\") === \"\") {\r\n      alert(\"로그인 해주세요\");\r\n    } else {\r\n      // console.log(number + \"||\" + recomend + \"||||||||||||||||||||||\");\r\n      let plus = recomend + 1;\r\n      console.log(number + \"========\" + plus);\r\n\r\n      let data = {\r\n        number: number,\r\n        recomend: plus,\r\n      };\r\n\r\n      fetch(\"http://localhost:3001/updateLike\", {\r\n        method: \"post\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      }).then(this.fetchFunction());\r\n    }\r\n  };\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    const content = this.state.list.map((list) => (\r\n      <div className=\"rep_box\" key={list.number}>\r\n        <div className=\"rep_title\">\r\n          <div className=\"rep_WTbox\">\r\n            <div className=\"rep_writer\">{list.nick}</div>\r\n            <div className=\"rep_time\"> {list.time}</div>\r\n          </div>\r\n          <div className=\"rep_buttonbox\">\r\n            <img src={like} width=\"12\" height=\"12\" className=\"rep_rexobtn\" />\r\n            <div\r\n              className=\"rep_reco\"\r\n              onClick={() => {\r\n                this.clickLick(list.number, list.recomend);\r\n              }}\r\n            >\r\n              좋아요: {list.recomend}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"rep_reple\">{list.reple}</div>\r\n      </div>\r\n    ));\r\n\r\n    return <div>{content}</div>;\r\n  }\r\n}\r\n\r\nexport default Boardreple;\r\n","C:\\Users\\jrns0\\com_community\\src\\board\\deleteBoard.js",["94"],"import React, { Component } from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport \"./boardMete.css\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nclass AlertDialogSlide extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      open: false,\r\n      inputpw: \"\",\r\n    };\r\n  }\r\n\r\n  onDelete = (e) => {\r\n    // e.preventDefault();\r\n    const box = {\r\n      inputpw: this.state.inputpw, //입력 패스워드\r\n      rownumber: this.props.data.number, //선택게시물넘버\r\n    };\r\n    fetch(\"http://localhost:3001/deletePw\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(box),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        if (json === false) {\r\n          alert(\"비밀번호가 틀렸어요\"); //비밀번호 틀림\r\n        } else {\r\n          alert(\"게시물이 삭제 되었습니다\");\r\n          fetch(\"http://localhost:3001/deleteBoard\", {\r\n            method: \"post\",\r\n            headers: {\r\n              \"content-type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(box),\r\n          })\r\n            .then((res) => res.json())\r\n            .then((json) => {\r\n              this.props.selectmenuFetch();\r\n              this.props.changeContentOn();\r\n            });\r\n        }\r\n      });\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n    console.log(this.state.inputpw);\r\n  };\r\n\r\n  handleClickOpen = () => {\r\n    if (localStorage.getItem(\"userid\") === \"\") {\r\n      alert(\"로그인 해주세요\");\r\n    } else {\r\n      this.setState({\r\n        open: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  accept = () => {\r\n    // alert(\"확인누름\");\r\n    this.setState(\r\n      {\r\n        open: false,\r\n      },\r\n      () => {\r\n        this.onDelete();\r\n        document.getElementById(\"qq\").value = \"\";\r\n      }\r\n    );\r\n    // console.log(this.props.data);\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      open: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button\r\n          // variant=\"outlined\"\r\n          // color=\"primary\"\r\n          onClick={this.handleClickOpen}\r\n          className=\"mete_deletebutton\"\r\n          style={{}}\r\n        >\r\n          삭제\r\n        </button>\r\n        <Dialog\r\n          open={this.state.open}\r\n          TransitionComponent={Transition}\r\n          keepMounted\r\n          onClose={this.handleClose}\r\n          aria-labelledby=\"alert-dialog-slide-title\"\r\n          aria-describedby=\"alert-dialog-slide-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-slide-title\">\r\n            {\"삭제하시려면 비밀번호를 입력하세요\"}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <TextField\r\n              //   className=\"write_title_\"\r\n              id=\"qq\"\r\n              label=\"비밀번호 입력\"\r\n              variant=\"outlined\"\r\n              name=\"inputpw\"\r\n              placeholder=\"\"\r\n              type=\"password\"\r\n              onChange={this.onChange}\r\n            />\r\n            {/* <DialogContentText id=\"alert-dialog-slide-description\">\r\n              Let Google help apps determine location. This means sending\r\n              anonymous location data to Google, even when no apps are running.\r\n            </DialogContentText> */}\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color=\"primary\">\r\n              취소\r\n            </Button>\r\n            <Button onClick={this.accept} color=\"primary\">\r\n              확인\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AlertDialogSlide;\r\n","C:\\Users\\jrns0\\com_community\\src\\login\\login.js",["95","96","97"],"import React, { Component } from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n// import \"../board/boardMete.css\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n// import \"../main/main.css\";\r\nimport \"./login_page.css\";\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: \"\",\r\n      pw: \"\",\r\n      button_name: \"로그인\",\r\n      button_backColor: \"white\",\r\n      loginOn: false,\r\n    };\r\n  }\r\n\r\n  login = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (this.state.loginOn === false) {\r\n      const box = {\r\n        id: this.state.id,\r\n        pw: this.state.pw,\r\n      };\r\n      fetch(\"http://localhost:3001/login\", {\r\n        method: \"post\",\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(box),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((json) => {\r\n          if (json.boolean === false) {\r\n            alert(\"아이디 또는 비밀번호가 틀렸어요\");\r\n          } else {\r\n            alert(\"로그인 성공\");\r\n            localStorage.setItem(\"userid\", json.id);\r\n            localStorage.setItem(\"usernick\", json.nick);\r\n\r\n            console.log(localStorage.getItem(\"userid\"));\r\n            console.log(localStorage.getItem(\"usernick\"));\r\n\r\n            this.handleClose();\r\n            this.setState({\r\n              button_name: \"로그아웃\",\r\n              button_backColor: \"#ececec\",\r\n              loginOn: true,\r\n            });\r\n            // window.localStorage.setItem(\"user\", JSON.stringify(json));\r\n            //   window.location.replace(\"/Main\");\r\n          }\r\n        });\r\n    } else {\r\n      //   this.setState({\r\n      //     button_name: \"로그인\",\r\n      //     button_backColor: \"white\",\r\n      //     loginOn: false,\r\n      //   });\r\n      //   localStorage.setItem(\"userid\", \"아니야\");\r\n      //   localStorage.setItem(\"usernick\", \"아니야\");\r\n      //   console.log(localStorage.getItem(\"userid\"));\r\n      //   console.log(localStorage.getItem(\"usernick\"));\r\n    }\r\n  };\r\n\r\n  idinput = (e) => {\r\n    //id인풋시 초기화\r\n    this.setState({\r\n      id: e.target.value,\r\n    });\r\n    console.log(this.state.id);\r\n  };\r\n\r\n  pwinput = (e) => {\r\n    //id인풋시 초기화\r\n    this.setState({\r\n      pw: e.target.value,\r\n    });\r\n    console.log(this.state.pw);\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      open: false,\r\n    });\r\n  };\r\n\r\n  handleClickOpen = () => {\r\n    if (this.state.loginOn === true) {\r\n      //로그인되있음\r\n      this.setState({\r\n        button_name: \"로그인\",\r\n        button_backColor: \"white\",\r\n        loginOn: false,\r\n      });\r\n      localStorage.setItem(\"userid\", \"\");\r\n      localStorage.setItem(\"usernick\", \"\");\r\n      alert(\"로그아웃 되었습니다.\");\r\n    } else {\r\n      //로그인 안되있음\r\n      this.setState({\r\n        open: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button\r\n          // variant=\"outlined\"\r\n          // color=\"primary\"\r\n          onClick={this.handleClickOpen}\r\n          className=\"main_login\"\r\n          style={{ backgroundColor: this.state.button_backColor }}\r\n        >\r\n          {this.state.button_name}\r\n        </button>\r\n        <Dialog\r\n          open={this.state.open}\r\n          TransitionComponent={Transition}\r\n          keepMounted\r\n          onClose={this.handleClose}\r\n          aria-labelledby=\"alert-dialog-slide-title\"\r\n          aria-describedby=\"alert-dialog-slide-description\"\r\n        >\r\n          <div className=\"login_subtitle\">컴퓨터공학닷컴</div>\r\n          <div className=\"login_title\">\r\n            로그인\r\n            {/* <DialogTitle id=\"alert-dialog-slide-title\">{\"로그인\"}</DialogTitle> */}\r\n          </div>\r\n          <DialogContent>\r\n            <div>\r\n              {/* <div className=\"login_login_box\">\r\n                <text className=\"login_login_text\">로그인</text>\r\n              </div> */}\r\n              {/* <div className=\"login_id_box\">\r\n                <text className=\"login_id_text\">아이디</text>\r\n              </div> */}\r\n              <div className=\"login_idinput\">\r\n                {/* <input onChange={this.idinput} className=\"login_id_input\" /> */}\r\n                <TextField\r\n                  //   className=\"write_title_\"\r\n                  id=\"qq\"\r\n                  label=\"아이디 입력\"\r\n                  variant=\"outlined\"\r\n                  name=\"inputpw\"\r\n                  placeholder=\"\"\r\n                  onChange={this.idinput}\r\n                  className=\"login_idinput_\"\r\n                />\r\n              </div>\r\n              {/* <div className=\"login_pw_box\">\r\n                <text className=\"login_id_text\">비밀번호</text>\r\n              </div> */}\r\n              <div className=\"login_pwinput\">\r\n                {/* <input onChange={this.pwinput} className=\"login_id_input\" /> */}\r\n                <TextField\r\n                  //   className=\"write_title_\"\r\n                  id=\"qq\"\r\n                  label=\"비밀번호 입력\"\r\n                  variant=\"outlined\"\r\n                  name=\"inputpw\"\r\n                  placeholder=\"\"\r\n                  type=\"password\"\r\n                  onChange={this.pwinput}\r\n                  className=\"login_pwinput_\"\r\n                />\r\n              </div>\r\n\r\n              {/* <button className=\"login_enterbotton\" onClick={this.login}>\r\n                  확인\r\n                </button> */}\r\n\r\n              {/* <div className=\"login_blank\"></div> */}\r\n              {/* <div className=\"login_bottom_box\"> */}\r\n              {/* <a\r\n                  href=\"/sign\"\r\n                  className=\"login_bottom_text\"\r\n                  onClick={this.goSign}\r\n                >\r\n                  처음이신가요? 가입하세요\r\n                </a> */}\r\n              {/* </div> */}\r\n            </div>\r\n\r\n            {/* <DialogContentText id=\"alert-dialog-slide-description\">\r\n              Let Google help apps determine location. This means sending\r\n              anonymous location data to Google, even when no apps are running.\r\n            </DialogContentText> */}\r\n          </DialogContent>\r\n          {/* <DialogActions> */}\r\n          <div className=\"login_buttons\">\r\n            <Button onClick={this.handleClose} color=\"primary\">\r\n              취소\r\n            </Button>\r\n            <Button onClick={this.login} color=\"primary\">\r\n              확인\r\n            </Button>\r\n          </div>\r\n          {/* </DialogActions> */}\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","C:\\Users\\jrns0\\com_community\\src\\sign\\sign.js",["98","99","100"],"import React, { Component } from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n// import \"../board/boardMete.css\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n// import \"../main/main.css\";\r\nimport \"./sign_page.css\";\r\n// import \"../login/login_page.css\";\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: \"\",\r\n      pw: \"\",\r\n      pw2: \"\",\r\n      nick: \"\",\r\n      idcheck: false,\r\n      pwcheck: false,\r\n      niccheck: false,\r\n    };\r\n  }\r\n\r\n  checkPW = (e) => {\r\n    if (this.state.pw === this.state.pw2) {\r\n      alert(\"비밀번호 일치합니다.\");\r\n      this.setState({\r\n        pwcheck: true,\r\n      });\r\n    } else {\r\n      alert(\"일치하지 않습니다.\");\r\n    }\r\n    console.log(this.state.pwcheck);\r\n  };\r\n\r\n  info_input = (e) => {\r\n    //id인풋시 초기화\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n    console.log([e.target.name] + this.state[e.target.name]);\r\n  };\r\n\r\n  checkID = (e) => {\r\n    e.preventDefault();\r\n\r\n    console.log(this.state.id);\r\n    const data = {\r\n      id: this.state.id,\r\n    };\r\n\r\n    fetch(\"http://localhost:3001/checkid\", {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        if (json.tf === true) {\r\n          alert(\"사용가능한 ID입니다\");\r\n          this.setState({\r\n            idcheck: true,\r\n          });\r\n          console.log(this.state.idcheck);\r\n        } else {\r\n          alert(\"다른 ID를 입력해주세요\");\r\n        }\r\n      });\r\n  };\r\n  checkNICK = (e) => {\r\n    e.preventDefault();\r\n\r\n    console.log(this.state.nick);\r\n    const data = {\r\n      nick: this.state.nick,\r\n    };\r\n\r\n    fetch(\"http://localhost:3001/checknick\", {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        if (json.tf === true) {\r\n          alert(\"사용가능한 닉네임입니다\");\r\n          this.setState({\r\n            niccheck: true,\r\n          });\r\n        } else {\r\n          alert(\"다른 닉네임을 입력해주세요\");\r\n        }\r\n        console.log(this.state.niccheck);\r\n      });\r\n  };\r\n\r\n  goSign = (e) => {\r\n    if (\r\n      this.state.idcheck === true &&\r\n      this.state.niccheck === true &&\r\n      this.state.pwcheck === true\r\n    ) {\r\n      const user_info = {\r\n        id: this.state.id,\r\n        pw: this.state.pw,\r\n        pw2: this.state.pw2,\r\n        nick: this.state.nick,\r\n      };\r\n      fetch(\"http://localhost:3001/signup\", {\r\n        method: \"post\",\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(user_info),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((json) => {\r\n          if (json) {\r\n            alert(\"회원가입 성공\");\r\n            window.location.href = \"/\";\r\n          } else {\r\n            alert(\"error\");\r\n          }\r\n        });\r\n    } else {\r\n      alert(\"확인을 모두 눌러주세요\");\r\n    }\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n    console.log(this.state.inputpw);\r\n  };\r\n\r\n  handleClickOpen = () => {\r\n    this.setState({\r\n      open: true,\r\n    });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      open: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button\r\n          // variant=\"outlined\"\r\n          // color=\"primary\"\r\n          onClick={this.handleClickOpen}\r\n          className=\"main_login\"\r\n          style={{}}\r\n        >\r\n          회원가입\r\n        </button>\r\n        <Dialog\r\n          open={this.state.open}\r\n          TransitionComponent={Transition}\r\n          keepMounted\r\n          onClose={this.handleClose}\r\n          aria-labelledby=\"alert-dialog-slide-title\"\r\n          aria-describedby=\"alert-dialog-slide-description\"\r\n        >\r\n          <DialogContent>\r\n            <div className=\"sign_subtitle\">컴퓨터공학닷컴</div>\r\n            <div className=\"sign_title\">\r\n              회원가입\r\n              {/* <DialogTitle id=\"alert-dialog-slide-title\">{\"로그인\"}</DialogTitle> */}\r\n            </div>\r\n\r\n            <div className=\"sign_inputbox\">\r\n              <div className=\"login_idinput\">\r\n                {/* <input onChange={this.idinput} className=\"login_id_input\" /> */}\r\n                <TextField\r\n                  //   className=\"write_title_\"\r\n                  id=\"id\"\r\n                  label=\"아이디 입력\"\r\n                  variant=\"outlined\"\r\n                  name=\"id\"\r\n                  placeholder=\"\"\r\n                  onChange={this.info_input}\r\n                  className=\"sign_input\"\r\n                />\r\n              </div>\r\n\r\n              <button className=\"sign_id_right\" onClick={this.checkID}>\r\n                확인\r\n              </button>\r\n            </div>\r\n            {/* <div className=\"sign_pw_box\">\r\n              <text className=\"sign_id_text\">비밀번호</text>\r\n            </div> */}\r\n            <div className=\"sign_inputbox\">\r\n              <TextField\r\n                //   className=\"write_title_\"\r\n                id=\"pw\"\r\n                label=\"비밀번호 입력\"\r\n                variant=\"outlined\"\r\n                name=\"pw\"\r\n                placeholder=\"\"\r\n                type=\"password\"\r\n                onChange={this.info_input}\r\n                className=\"sign_input\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"sign_inputbox\">\r\n              <TextField\r\n                //   className=\"write_title_\"\r\n                id=\"pw2\"\r\n                label=\"비밀번호 확인\"\r\n                variant=\"outlined\"\r\n                name=\"pw2\"\r\n                placeholder=\"\"\r\n                type=\"password\"\r\n                onChange={this.info_input}\r\n                className=\"sign_input\"\r\n              />\r\n              <button className=\"sign_id_right\" onClick={this.checkPW}>\r\n                확인\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"sign_inputbox\">\r\n              <TextField\r\n                id=\"nick\"\r\n                label=\"닉네임 입력\"\r\n                variant=\"outlined\"\r\n                name=\"nick\"\r\n                placeholder=\"\"\r\n                // type=\"password\"\r\n                onChange={this.info_input}\r\n                className=\"sign_input\"\r\n              />\r\n              <button className=\"sign_id_right\" onClick={this.checkNICK}>\r\n                확인\r\n              </button>\r\n            </div>\r\n          </DialogContent>\r\n          <div className=\"sign_buttons\">\r\n            <Button onClick={this.handleClose} color=\"primary\">\r\n              취소\r\n            </Button>\r\n            <Button onClick={this.goSign} color=\"primary\">\r\n              가입\r\n            </Button>\r\n          </div>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","C:\\Users\\jrns0\\com_community\\src\\ifram\\ifram.js",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":1,"column":8,"nodeType":"107","messageId":"108","endLine":1,"endColumn":12},{"ruleId":"105","severity":1,"message":"109","line":3,"column":17,"nodeType":"107","messageId":"108","endLine":3,"endColumn":26},{"ruleId":"105","severity":1,"message":"110","line":8,"column":8,"nodeType":"107","messageId":"108","endLine":8,"endColumn":18},{"ruleId":"105","severity":1,"message":"111","line":9,"column":8,"nodeType":"107","messageId":"108","endLine":9,"endColumn":24},{"ruleId":"105","severity":1,"message":"112","line":1,"column":33,"nodeType":"107","messageId":"108","endLine":1,"endColumn":40},{"ruleId":"105","severity":1,"message":"113","line":4,"column":10,"nodeType":"107","messageId":"108","endLine":4,"endColumn":18},{"ruleId":"105","severity":1,"message":"114","line":18,"column":5,"nodeType":"107","messageId":"108","endLine":18,"endColumn":14},{"ruleId":"115","severity":1,"message":"116","line":198,"column":13,"nodeType":"117","endLine":203,"endColumn":15},{"ruleId":"105","severity":1,"message":"118","line":3,"column":8,"nodeType":"107","messageId":"108","endLine":3,"endColumn":11},{"ruleId":"105","severity":1,"message":"119","line":6,"column":8,"nodeType":"107","messageId":"108","endLine":6,"endColumn":9},{"ruleId":"105","severity":1,"message":"120","line":2,"column":8,"nodeType":"107","messageId":"108","endLine":2,"endColumn":15},{"ruleId":"121","severity":1,"message":"122","line":106,"column":11,"nodeType":"117","endLine":106,"endColumn":45},{"ruleId":"105","severity":1,"message":"123","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":26},{"ruleId":"105","severity":1,"message":"119","line":12,"column":8,"nodeType":"107","messageId":"108","endLine":12,"endColumn":9},{"ruleId":"105","severity":1,"message":"124","line":13,"column":8,"nodeType":"107","messageId":"108","endLine":13,"endColumn":14},{"ruleId":"105","severity":1,"message":"125","line":50,"column":7,"nodeType":"107","messageId":"108","endLine":50,"endColumn":16},{"ruleId":"126","severity":1,"message":"127","line":187,"column":17,"nodeType":"128","messageId":"129","endLine":187,"endColumn":24},{"ruleId":"105","severity":1,"message":"130","line":2,"column":10,"nodeType":"107","messageId":"108","endLine":2,"endColumn":20},{"ruleId":"131","severity":1,"message":"132","line":47,"column":40,"nodeType":"133","messageId":"129","endLine":47,"endColumn":42},{"ruleId":"131","severity":1,"message":"134","line":126,"column":36,"nodeType":"133","messageId":"129","endLine":126,"endColumn":38},{"ruleId":"131","severity":1,"message":"134","line":126,"column":64,"nodeType":"133","messageId":"129","endLine":126,"endColumn":66},{"ruleId":"105","severity":1,"message":"135","line":2,"column":8,"nodeType":"107","messageId":"108","endLine":2,"endColumn":12},{"ruleId":"115","severity":1,"message":"116","line":154,"column":15,"nodeType":"117","endLine":159,"endColumn":17},{"ruleId":"115","severity":1,"message":"116","line":112,"column":13,"nodeType":"117","endLine":112,"endColumn":78},{"ruleId":"105","severity":1,"message":"136","line":7,"column":8,"nodeType":"107","messageId":"108","endLine":7,"endColumn":25},{"ruleId":"105","severity":1,"message":"137","line":5,"column":8,"nodeType":"107","messageId":"108","endLine":5,"endColumn":21},{"ruleId":"105","severity":1,"message":"136","line":7,"column":8,"nodeType":"107","messageId":"108","endLine":7,"endColumn":25},{"ruleId":"105","severity":1,"message":"138","line":8,"column":8,"nodeType":"107","messageId":"108","endLine":8,"endColumn":19},{"ruleId":"105","severity":1,"message":"137","line":5,"column":8,"nodeType":"107","messageId":"108","endLine":5,"endColumn":21},{"ruleId":"105","severity":1,"message":"136","line":7,"column":8,"nodeType":"107","messageId":"108","endLine":7,"endColumn":25},{"ruleId":"105","severity":1,"message":"138","line":8,"column":8,"nodeType":"107","messageId":"108","endLine":8,"endColumn":19},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'Boardwrite' is defined but never used.","'AlertDialogSlide' is defined but never used.","'webview' is defined but never used.","'nodeName' is defined but never used.","'clickmenu' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'App' is defined but never used.","'$' is defined but never used.","'WebView' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useEffect' is defined but never used.","'jQuery' is defined but never used.","'useStyles' is assigned a value but never used.","no-dupe-keys","Duplicate key 'content'.","ObjectExpression","unexpected","'makeStyles' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","Expected '===' and instead saw '=='.","'App1' is defined but never used.","'DialogContentText' is defined but never used.","'DialogActions' is defined but never used.","'DialogTitle' is defined but never used.","no-global-assign","no-unsafe-negation"]